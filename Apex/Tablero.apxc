/**
 * <code>Tablero</code>, encapsula los métodos y atributos de un tablero. Entre ellas
 * actualizar la ubicación del jugador, revisar si el juego ha terminado y revisar si el
 * jugador ha caído en escalera o serpiente.
 */
public class Tablero {
    // Dimensión del tablero, ej: un tablero de 25 casillas tiene dimensión/tamaño 5x5.
    private Integer size = 5;
    private Integer ubicacion = 0;
    // El trabajo de shortcutsMap es mapear casillas (int) a otras casillas (int). En efecto
    // codificando el comportamiento de una escalera o serpiente.
    private Map<Integer, Integer> shortcutsMap = new Map<Integer, Integer>{
        3 => 11,
        6 => 17,
        9 => 18,
        10 => 12,
        3 => 11,
        14 => 4,
        19 => 8,
        22 => 20,
        24 => 16
    };

    private List<Casilla> casillas = new List<Casilla>();

    /**
     * El constructor de Tablero inicializa el contenido del mismo (cada elemento de casillas),
     * le asigna una ubicación/valor y una escalera o serpiente.
     */
    public Tablero() {

        for (Integer i = 0; i < size*size; i++) {
            Integer shortcut = -1;
            if (shortcutsMap.containsKey(i)) {
                shortcut = shortcutsMap.get(i);
            }
            casillas.add(new Casilla(shortcut));
        }
    }

    /**
     * Actualiza la ubicación del jugador
     * @param offset, int, número de casillas a mover.
     */
    public void mover(Integer offset) {
        ubicacion += offset;
        System.debug('test');
    }

    /**
     * Revisa si la casilla dónde está el jugador actual tiene una serpiente o escalera,
     * si es el caso, actualiza entonces la ubicación de acuerdo al valor donde el atajo
     * lo lleva.
     * @return true si la casilla tiene un atajo | false en caso contrario.
     */
    public Boolean isEscaleraOrSerpiente() {
        Integer shortcut = casillas.get(ubicacion).getShortcut();
        //System.debug(casillas.get(ubicacion));
        if (shortcut != -1) {
            ubicacion = shortcut;
            return true;
        }

        return false;
    }

    /**
     * Retorna la ubicación actual del jugador en el tablero.
     * @return int
     */
    public Integer getUbicacion() { return ubicacion; }

    /**
     * El juego termina si se alcanza una ubicación >= 25
     * @return boolean.
     */
    public Boolean gameOver() {
        return ubicacion >= 25;
    }

}